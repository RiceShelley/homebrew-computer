#*****************************************************************************************
# Vivado (TM) v2018.3 (64-bit)
#
# risc16.tcl: Tcl script for re-creating project 'risc16'
#
# Generated by Vivado on Mon Sep 30 14:48:30 CDT 2019
# IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (risc16.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "/home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/clk_div.v"
#    "/home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/display_ctrl.v"
#    "/home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/CPU_Programmer.v"
#    "/home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/mux.v"
#    "/home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/clock_bus.v"
#    "/home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/vga.v"
#    "/home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/bd/risc16System/hdl/risc16System_wrapper.v"
#    "/home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/RiSC_Programmer.v"
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/rootie/devel/hdl-stash/nexys/nexys_7seg.v"
#    "/home/rootie/devel/homebrew-computer/risc-16/hardware/alu.v"
#    "/home/rootie/devel/homebrew-computer/risc-16/hardware/ctrl.v"
#    "/home/rootie/devel/homebrew-computer/risc-16/hardware/gpr.v"
#    "/home/rootie/devel/homebrew-computer/risc-16/hardware/risc16.v"
#    "/home/rootie/devel/hdl-stash/nexys/spi_slave.v"
#    "/home/rootie/devel/homebrew-computer/risc-16/hardware/ram.v"
#    "/home/rootie/devel/homebrew-computer/risc-16/hardware/risc16_tb.v"
#    "/home/rootie/Documents/digilent-xdc-master/Nexys-A7-100T-Master.xdc"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "risc16"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "risc16.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7a100tcsg324-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "digilentinc.com:nexys-a7-100t:part0:1.0" -objects $obj
set_property -name "board_part_repo_paths" -value "/home/rootie/Documents/vivado-boards/new/board_files" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.board_id" -value "nexys-a7-100t" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "6" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "6" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "6" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "6" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "6" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "6" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "6" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "26" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../../../hdl-stash/nexys/nexys_7seg.v"] \
 [file normalize "${origin_dir}/../../risc-16/hardware/alu.v"] \
 [file normalize "${origin_dir}/../../risc-16/hardware/ctrl.v"] \
 [file normalize "${origin_dir}/../../risc-16/hardware/gpr.v"] \
 [file normalize "${origin_dir}/../../risc-16/hardware/risc16.v"] \
 [file normalize "${origin_dir}/../../../hdl-stash/nexys/spi_slave.v"] \
 [file normalize "${origin_dir}/../../risc-16/hardware/ram.v"] \
 [file normalize "${origin_dir}/../../risc-16/hardware/risc16_tb.v"] \
]
add_files -norecurse -fileset $obj $files

# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/risc16.srcs/sources_1/new/clk_div.v" ]\
 [file normalize "${origin_dir}/risc16.srcs/sources_1/new/display_ctrl.v" ]\
 [file normalize "${origin_dir}/risc16.srcs/sources_1/new/CPU_Programmer.v" ]\
 [file normalize "${origin_dir}/risc16.srcs/sources_1/new/mux.v" ]\
 [file normalize "${origin_dir}/risc16.srcs/sources_1/new/clock_bus.v" ]\
 [file normalize "${origin_dir}/risc16.srcs/sources_1/new/vga.v" ]\
 [file normalize "${origin_dir}/risc16.srcs/sources_1/bd/risc16System/hdl/risc16System_wrapper.v" ]\
 [file normalize "${origin_dir}/risc16.srcs/sources_1/new/RiSC_Programmer.v" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "risc16System_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../../../../Documents/digilent-xdc-master/Nexys-A7-100T-Master.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../../../../Documents/digilent-xdc-master/Nexys-A7-100T-Master.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "risc16System_wrapper" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files nexys_7seg.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/hdl-stash/nexys/nexys_7seg.v
}
if { [get_files clk_div.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/clk_div.v
}
if { [get_files alu.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/risc-16/hardware/alu.v
}
if { [get_files ctrl.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/risc-16/hardware/ctrl.v
}
if { [get_files gpr.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/risc-16/hardware/gpr.v
}
if { [get_files risc16.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/risc-16/hardware/risc16.v
}
if { [get_files display_ctrl.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/display_ctrl.v
}
if { [get_files spi_slave.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/hdl-stash/nexys/spi_slave.v
}
if { [get_files CPU_Programmer.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/CPU_Programmer.v
}
if { [get_files mux.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/mux.v
}
if { [get_files clk_div.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/clk_div.v
}
if { [get_files clock_bus.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/clock_bus.v
}
if { [get_files vga.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/implementation/risc16/risc16.srcs/sources_1/new/vga.v
}
if { [get_files ram.v] == "" } {
  import_files -quiet -fileset sources_1 /home/rootie/devel/homebrew-computer/risc-16/hardware/ram.v
}


# Proc to create BD risc16System
proc cr_bd_risc16System { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# CPU_Programmer, mux, clock_bus, ram, risc16, clk_div, clk_div, display_ctrl, nexys_7seg, spi_slave, vga



  # CHANGE DESIGN NAME HERE
  set design_name risc16System

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:clk_wiz:6.0\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  CPU_Programmer\
  mux\
  clock_bus\
  ram\
  risc16\
  clk_div\
  clk_div\
  display_ctrl\
  nexys_7seg\
  spi_slave\
  vga\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set BTND [ create_bd_port -dir I BTND ]
  set BTNU [ create_bd_port -dir I BTNU ]
  set LED_B [ create_bd_port -dir O LED_B ]
  set VGA_B [ create_bd_port -dir O -from 3 -to 0 VGA_B ]
  set VGA_G [ create_bd_port -dir O -from 3 -to 0 VGA_G ]
  set VGA_HS [ create_bd_port -dir O VGA_HS ]
  set VGA_R [ create_bd_port -dir O -from 3 -to 0 VGA_R ]
  set VGA_VS [ create_bd_port -dir O VGA_VS ]
  set clk [ create_bd_port -dir I clk ]
  set clk_sel [ create_bd_port -dir I clk_sel ]
  set miso [ create_bd_port -dir O miso ]
  set mosi [ create_bd_port -dir I mosi ]
  set pgm [ create_bd_port -dir I pgm ]
  set pgm_led [ create_bd_port -dir O pgm_led ]
  set sclk [ create_bd_port -dir I sclk ]
  set seg [ create_bd_port -dir O -from 7 -to 0 seg ]
  set seg_sel [ create_bd_port -dir O -from 7 -to 0 seg_sel ]
  set ss [ create_bd_port -dir I ss ]

  # Create instance: CLK_5MHz, and set properties
  set CLK_5MHz [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 CLK_5MHz ]
  set_property -dict [ list \
   CONFIG.CLKOUT1_JITTER {631.442} \
   CONFIG.CLKOUT1_PHASE_ERROR {346.848} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {5} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {32.000} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {128.000} \
   CONFIG.MMCM_DIVCLK_DIVIDE {5} \
   CONFIG.USE_LOCKED {false} \
   CONFIG.USE_RESET {false} \
 ] $CLK_5MHz

  # Create instance: CPU_Programmer, and set properties
  set block_name CPU_Programmer
  set block_cell_name CPU_Programmer
  if { [catch {set CPU_Programmer [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $CPU_Programmer eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Clk_Mux, and set properties
  set block_name mux
  set block_cell_name Clk_Mux
  if { [catch {set Clk_Mux [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Clk_Mux eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.WIDTH {2} \
 ] $Clk_Mux

  # Create instance: Clock_Bus, and set properties
  set block_name clock_bus
  set block_cell_name Clock_Bus
  if { [catch {set Clock_Bus [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Clock_Bus eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: MEM, and set properties
  set block_name ram
  set block_cell_name MEM
  if { [catch {set MEM [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $MEM eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Risc16_CPU, and set properties
  set block_name risc16
  set block_cell_name Risc16_CPU
  if { [catch {set Risc16_CPU [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Risc16_CPU eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: SLOW_DEBUG_CLK, and set properties
  set block_name clk_div
  set block_cell_name SLOW_DEBUG_CLK
  if { [catch {set SLOW_DEBUG_CLK [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $SLOW_DEBUG_CLK eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.DIV {10} \
 ] $SLOW_DEBUG_CLK

  # Create instance: VGA_25MHz_CLK, and set properties
  set VGA_25MHz_CLK [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 VGA_25MHz_CLK ]
  set_property -dict [ list \
   CONFIG.CLKOUT1_JITTER {181.828} \
   CONFIG.CLKOUT1_PHASE_ERROR {104.359} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {25} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {9.125} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {36.500} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.USE_LOCKED {false} \
   CONFIG.USE_RESET {false} \
 ] $VGA_25MHz_CLK

  # Create instance: clk_div_by_10, and set properties
  set block_name clk_div
  set block_cell_name clk_div_by_10
  if { [catch {set clk_div_by_10 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $clk_div_by_10 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.DIV {10} \
 ] $clk_div_by_10

  # Create instance: display_ctrl, and set properties
  set block_name display_ctrl
  set block_cell_name display_ctrl
  if { [catch {set display_ctrl [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $display_ctrl eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: nexys_7seg_display, and set properties
  set block_name nexys_7seg
  set block_cell_name nexys_7seg_display
  if { [catch {set nexys_7seg_display [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $nexys_7seg_display eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: spi_slave, and set properties
  set block_name spi_slave
  set block_cell_name spi_slave
  if { [catch {set spi_slave [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $spi_slave eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: vga_0, and set properties
  set block_name vga
  set block_cell_name vga_0
  if { [catch {set vga_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $vga_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net BTND_1 [get_bd_ports BTND] [get_bd_pins MEM/rst] [get_bd_pins Risc16_CPU/rst] [get_bd_pins vga_0/rst]
  connect_bd_net -net BTNU_1 [get_bd_ports BTNU] [get_bd_pins Clock_Bus/clkb]
  connect_bd_net -net CPU_Programmer_0_pd_wr [get_bd_pins CPU_Programmer/pg_wr] [get_bd_pins MEM/pg_wr]
  connect_bd_net -net CPU_Programmer_0_pgm [get_bd_ports pgm] [get_bd_ports pgm_led] [get_bd_pins MEM/pgm] [get_bd_pins Risc16_CPU/pgm]
  connect_bd_net -net CPU_Programmer_0_pgm_addr [get_bd_pins CPU_Programmer/pgm_addr] [get_bd_pins MEM/pgm_addr]
  connect_bd_net -net CPU_Programmer_0_pgm_data [get_bd_pins CPU_Programmer/pgm_data] [get_bd_pins MEM/pgm_data]
  connect_bd_net -net Risc16_CPU_data_write [get_bd_pins MEM/mem_in] [get_bd_pins Risc16_CPU/data_write]
  connect_bd_net -net Risc16_CPU_mem_addr [get_bd_pins MEM/addr] [get_bd_pins Risc16_CPU/mem_addr]
  connect_bd_net -net Risc16_CPU_mem_clk [get_bd_pins MEM/clk] [get_bd_pins Risc16_CPU/mem_clk]
  connect_bd_net -net Risc16_CPU_mem_rw [get_bd_pins MEM/rw] [get_bd_pins Risc16_CPU/mem_rw]
  connect_bd_net -net clk_1 [get_bd_ports clk] [get_bd_pins CLK_5MHz/clk_in1] [get_bd_pins CPU_Programmer/clk] [get_bd_pins Risc16_CPU/pclk] [get_bd_pins VGA_25MHz_CLK/clk_in1] [get_bd_pins spi_slave/clk]
  connect_bd_net -net clk_div_0_clk_out [get_bd_ports LED_B] [get_bd_pins SLOW_DEBUG_CLK/clk] [get_bd_pins clk_div_by_10/clk_out] [get_bd_pins display_ctrl/clk] [get_bd_pins nexys_7seg_display/clk]
  connect_bd_net -net clk_div_1_clk_out [get_bd_pins Clock_Bus/clka] [get_bd_pins SLOW_DEBUG_CLK/clk_out]
  connect_bd_net -net clk_sel_1 [get_bd_ports clk_sel] [get_bd_pins Clk_Mux/mux_sel]
  connect_bd_net -net clk_wiz_0_clk_out1 [get_bd_pins CLK_5MHz/clk_out1] [get_bd_pins clk_div_by_10/clk]
  connect_bd_net -net clk_wiz_0_clk_out2 [get_bd_pins VGA_25MHz_CLK/clk_out1] [get_bd_pins vga_0/clk]
  connect_bd_net -net clock_bus_0_clk_bus [get_bd_pins Clk_Mux/mux_in] [get_bd_pins Clock_Bus/clk_bus]
  connect_bd_net -net display_ctrl_0_data_out [get_bd_pins display_ctrl/data_out] [get_bd_pins nexys_7seg_display/data]
  connect_bd_net -net mosi_1 [get_bd_ports mosi] [get_bd_pins spi_slave/mosi]
  connect_bd_net -net mux_0_out [get_bd_pins Clk_Mux/mux_out] [get_bd_pins Risc16_CPU/clk_in]
  connect_bd_net -net nexys_7seg_0_seg [get_bd_ports seg] [get_bd_pins nexys_7seg_display/seg]
  connect_bd_net -net nexys_7seg_0_seg_sel [get_bd_ports seg_sel] [get_bd_pins nexys_7seg_display/seg_sel]
  connect_bd_net -net ram_0_data_out [get_bd_pins MEM/data_out] [get_bd_pins Risc16_CPU/data_in]
  connect_bd_net -net ram_0_ir [get_bd_pins MEM/ir] [get_bd_pins Risc16_CPU/ir]
  connect_bd_net -net ram_0_status_reg [get_bd_pins MEM/status_reg] [get_bd_pins Risc16_CPU/status_reg]
  connect_bd_net -net risc16_0_outRegA [get_bd_pins Risc16_CPU/outRegA] [get_bd_pins display_ctrl/data]
  connect_bd_net -net risc16_0_pc_out [get_bd_pins MEM/pc] [get_bd_pins Risc16_CPU/pc_out] [get_bd_pins display_ctrl/pc_in]
  connect_bd_net -net sclk_1 [get_bd_ports sclk] [get_bd_pins spi_slave/sclk]
  connect_bd_net -net spi_slave_0_miso [get_bd_ports miso] [get_bd_pins spi_slave/miso]
  connect_bd_net -net spi_slave_0_rrdy [get_bd_pins CPU_Programmer/rrdy] [get_bd_pins spi_slave/rrdy]
  connect_bd_net -net spi_slave_0_rx_recv [get_bd_pins CPU_Programmer/byte_in] [get_bd_pins spi_slave/rx_recv]
  connect_bd_net -net ss_1 [get_bd_ports ss] [get_bd_pins spi_slave/ss]
  connect_bd_net -net vga_0_blue [get_bd_ports VGA_B] [get_bd_pins vga_0/blue]
  connect_bd_net -net vga_0_green [get_bd_ports VGA_G] [get_bd_pins vga_0/green]
  connect_bd_net -net vga_0_hsync [get_bd_ports VGA_HS] [get_bd_pins vga_0/hsync]
  connect_bd_net -net vga_0_red [get_bd_ports VGA_R] [get_bd_pins vga_0/red]
  connect_bd_net -net vga_0_vsync [get_bd_ports VGA_VS] [get_bd_pins vga_0/vsync]

  # Create address segments

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 6.8.11  2018-08-07 bk=1.4403 VDI=40 GEI=35 GUI=JA:9.0 TLS
#  -string -flagsOSRD
preplace port clk_sel -pg 1 -y 550 -defaultsOSRD
preplace port BTNU -pg 1 -y 670 -defaultsOSRD
preplace port miso -pg 1 -y 530 -defaultsOSRD
preplace port VGA_VS -pg 1 -y 140 -defaultsOSRD
preplace port mosi -pg 1 -y 360 -defaultsOSRD
preplace port pgm_led -pg 1 -y 200 -defaultsOSRD
preplace port pgm -pg 1 -y 210 -defaultsOSRD
preplace port clk -pg 1 -y 420 -defaultsOSRD
preplace port VGA_HS -pg 1 -y 120 -defaultsOSRD
preplace port ss -pg 1 -y 400 -defaultsOSRD
preplace port BTND -pg 1 -y 170 -defaultsOSRD
preplace port LED_B -pg 1 -y 550 -defaultsOSRD
preplace port sclk -pg 1 -y 380 -defaultsOSRD
preplace portBus VGA_B -pg 1 -y 100 -defaultsOSRD
preplace portBus seg_sel -pg 1 -y 630 -defaultsOSRD
preplace portBus VGA_R -pg 1 -y 60 -defaultsOSRD
preplace portBus seg -pg 1 -y 610 -defaultsOSRD
preplace portBus VGA_G -pg 1 -y 80 -defaultsOSRD
preplace inst Risc16_CPU -pg 1 -lvl 4 -y 320 -defaultsOSRD
preplace inst Clock_Bus -pg 1 -lvl 2 -y 620 -defaultsOSRD
preplace inst clk_div_by_10 -pg 1 -lvl 5 -y 750 -defaultsOSRD
preplace inst display_ctrl -pg 1 -lvl 5 -y 630 -defaultsOSRD
preplace inst CLK_5MHz -pg 1 -lvl 4 -y 750 -defaultsOSRD
preplace inst MEM -pg 1 -lvl 3 -y 360 -defaultsOSRD
preplace inst VGA_25MHz_CLK -pg 1 -lvl 5 -y 90 -defaultsOSRD
preplace inst vga_0 -pg 1 -lvl 6 -y 100 -defaultsOSRD
preplace inst CPU_Programmer -pg 1 -lvl 2 -y 390 -defaultsOSRD
preplace inst SLOW_DEBUG_CLK -pg 1 -lvl 1 -y 610 -defaultsOSRD
preplace inst spi_slave -pg 1 -lvl 1 -y 410 -defaultsOSRD
preplace inst nexys_7seg_display -pg 1 -lvl 6 -y 620 -defaultsOSRD
preplace inst Clk_Mux -pg 1 -lvl 3 -y 610 -defaultsOSRD
preplace netloc spi_slave_0_rrdy 1 1 1 N
preplace netloc mosi_1 1 0 1 NJ
preplace netloc nexys_7seg_0_seg 1 6 1 NJ
preplace netloc Risc16_CPU_mem_clk 1 2 3 630 160 NJ 160 1390
preplace netloc vga_0_vsync 1 6 1 NJ
preplace netloc vga_0_hsync 1 6 1 NJ
preplace netloc risc16_0_pc_out 1 2 3 640 540 NJ 540 1420
preplace netloc risc16_0_outRegA 1 4 1 1400
preplace netloc CPU_Programmer_0_pgm_addr 1 2 1 N
preplace netloc spi_slave_0_miso 1 1 6 310J 530 NJ 530 NJ 530 NJ 530 NJ 530 NJ
preplace netloc ram_0_ir 1 3 1 N
preplace netloc mux_0_out 1 3 1 1010
preplace netloc sclk_1 1 0 1 NJ
preplace netloc ram_0_data_out 1 3 1 N
preplace netloc BTND_1 1 0 6 NJ 170 NJ 170 620 170 1020 150 NJ 150 1720J
preplace netloc nexys_7seg_0_seg_sel 1 6 1 NJ
preplace netloc vga_0_blue 1 6 1 NJ
preplace netloc CPU_Programmer_0_pgm_data 1 2 1 N
preplace netloc spi_slave_0_rx_recv 1 1 1 N
preplace netloc display_ctrl_0_data_out 1 5 1 N
preplace netloc Risc16_CPU_mem_addr 1 2 3 640 180 NJ 180 1380
preplace netloc vga_0_red 1 6 1 NJ
preplace netloc clock_bus_0_clk_bus 1 2 1 N
preplace netloc clk_1 1 0 5 20 520 300 510 NJ 510 1000 90 NJ
preplace netloc ram_0_status_reg 1 3 1 N
preplace netloc vga_0_green 1 6 1 NJ
preplace netloc BTNU_1 1 0 2 NJ 670 300J
preplace netloc ss_1 1 0 1 NJ
preplace netloc clk_div_0_clk_out 1 0 7 20 690 NJ 690 NJ 690 NJ 690 1410 810 1720 550 NJ
preplace netloc clk_wiz_0_clk_out1 1 4 1 NJ
preplace netloc Risc16_CPU_data_write 1 2 3 650 190 NJ 190 1370
preplace netloc clk_wiz_0_clk_out2 1 5 1 NJ
preplace netloc clk_sel_1 1 0 3 NJ 550 NJ 550 630J
preplace netloc CPU_Programmer_0_pd_wr 1 2 1 N
preplace netloc clk_div_1_clk_out 1 1 1 NJ
preplace netloc CPU_Programmer_0_pgm 1 0 7 NJ 210 NJ 210 610 210 1030 200 NJ 200 NJ 200 NJ
preplace netloc Risc16_CPU_mem_rw 1 2 3 660 520 NJ 520 1380
levelinfo -pg 1 0 160 460 830 1200 1570 1860 2020 -top 0 -bot 820
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_risc16System()
cr_bd_risc16System ""
set_property REGISTERED_WITH_MANAGER "1" [get_files risc16System.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files risc16System.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a100tcsg324-1 -flow {Vivado Synthesis 2018} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2018" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "synth_1_synth_report_utilization_0" -objects $obj

}
set obj [get_runs synth_1]
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a100tcsg324-1 -flow {Vivado Implementation 2018} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2018" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_init_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_opt_report_drc_0" -objects $obj

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_power_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_io_0" -objects $obj

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_utilization_0" -objects $obj

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_control_sets_0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_incremental_reuse_0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_incremental_reuse_1" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_post_place_power_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_phys_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_drc_0" -objects $obj

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_methodology_0" -objects $obj

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_power_0" -objects $obj

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_route_status_0" -objects $obj

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_incremental_reuse_0" -objects $obj

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_clock_utilization_0" -objects $obj

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_bus_skew_0" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_post_route_phys_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_post_route_phys_opt_report_bus_skew_0" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
set obj [get_dashboards default_dashboard]

# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
# Set current dashboard to 'default_dashboard' 
current_dashboard default_dashboard 
